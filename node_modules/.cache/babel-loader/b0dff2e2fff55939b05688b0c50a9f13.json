{"ast":null,"code":"var _jsxFileName = \"/home/naama/thomas/src/components/img.js\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport Images from \"./images\";\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from \"@material-ui/core/Dialog\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Slide from \"@material-ui/core/Slide\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\"\n  },\n  gridList: {\n    width: \"auto\",\n    textAlign: \"left\"\n  },\n  icon: {\n    color: \"rgba(255, 255, 255, 0.54)\"\n  },\n  appBar: {\n    position: \"inherit\",\n    color: \"rgba(255, 255, 255, 0.54)\"\n  },\n  selectedTile: {\n    width: \"100%\",\n    height: \"auto\"\n  }\n}));\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return /*#__PURE__*/React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 10\n    }\n  }));\n});\nexport default function TitlebarGridList() {\n  const classes = useStyles();\n  const [selectedTile, setSelectedTile] = React.useState(null);\n\n  const handleClickOpen = tile => {\n    setSelectedTile(tile);\n  };\n\n  const handleClose = () => {\n    setSelectedTile(null);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    cols: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"className=\", classes.gridList, Images.map(tile => /*#__PURE__*/React.createElement(GridListTile, {\n    key: tile.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: tile.src,\n    alt: tile.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(GridListTileBar, {\n    title: tile.title,\n    actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": `info about ${tile.title}`,\n      className: classes.icon,\n      value: tile.id,\n      onClick: () => handleClickOpen(tile),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ZoomInIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 19\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(Dialog, {\n    open: selectedTile !== null,\n    onClose: handleClose,\n    TransitionComponent: Transition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, selectedTile && /*#__PURE__*/React.createElement(\"img\", {\n    src: selectedTile.src,\n    alt: selectedTile.title,\n    className: classes.selectedTile,\n    body: selectedTile.body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["/home/naama/thomas/src/components/img.js"],"names":["React","makeStyles","GridList","GridListTile","GridListTileBar","IconButton","ZoomInIcon","Images","Typography","Dialog","CloseIcon","Slide","AppBar","Toolbar","useStyles","theme","root","display","flexWrap","justifyContent","overflow","gridList","width","textAlign","icon","color","appBar","position","selectedTile","height","Transition","forwardRef","props","ref","TitlebarGridList","classes","setSelectedTile","useState","handleClickOpen","tile","handleClose","map","id","src","title","body"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport Images from \"./images\";\nimport Typography from '@material-ui/core/Typography'\nimport Dialog from \"@material-ui/core/Dialog\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Slide from \"@material-ui/core/Slide\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n  },\n  gridList: {\n   width:\"auto\",\n   textAlign:\"left\"\n  },\n  icon: {\n    color: \"rgba(255, 255, 255, 0.54)\"\n  },\n  appBar: {\n    position: \"inherit\",\n    color:\"rgba(255, 255, 255, 0.54)\"\n  },\n  selectedTile:{\n    width: \"100%\",\n    height:\"auto\"\n  }\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function TitlebarGridList() {\n  const classes = useStyles();\n  const [selectedTile, setSelectedTile] = React.useState(null);\n\n  const handleClickOpen = tile => {\n    setSelectedTile(tile);\n  };\n\n  const handleClose = () => {\n    setSelectedTile(null);\n  };\n  return (\n    <div className={classes.root}>\n      <GridList cols={3}>\n        className={classes.gridList}\n        {Images.map(tile => (\n          <GridListTile key={tile.id} >\n            <img src={tile.src} alt={tile.title}/>\n            <GridListTileBar\n            title={tile.title}\n              actionIcon={\n                <IconButton\n                  aria-label={`info about ${tile.title}`}\n                  className={classes.icon}\n                  value={tile.id}\n                  onClick={() => handleClickOpen(tile)}\n                >\n                  <ZoomInIcon />\n                  \n                </IconButton>\n              }\n            />\n            \n          </GridListTile>\n        ))}\n      </GridList>\n      <Dialog\n        open={selectedTile !== null}\n        onClose={handleClose}\n        TransitionComponent={Transition}\n         >\n          \n\n        {selectedTile && (\n          <img src={selectedTile.src} alt={selectedTile.title} className={classes.selectedTile} body={selectedTile.body}/>\n\n        )}\n          \n\n        \n      </Dialog>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}